{"remainingRequest":"/Users/mac/dev/blockchain/klaytn/delegation-service/delegation-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mac/dev/blockchain/klaytn/delegation-service/delegation-client/src/components/HelloWorld.vue?vue&type=style&index=0&id=469af010&scoped=true&lang=css&","dependencies":[{"path":"/Users/mac/dev/blockchain/klaytn/delegation-service/delegation-client/src/components/HelloWorld.vue","mtime":1592139661610},{"path":"/Users/mac/dev/blockchain/klaytn/delegation-service/delegation-client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/dev/blockchain/klaytn/delegation-service/delegation-client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/mac/dev/blockchain/klaytn/delegation-service/delegation-client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/mac/dev/blockchain/klaytn/delegation-service/delegation-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/dev/blockchain/klaytn/delegation-service/delegation-client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKaDMgewogIG1hcmdpbjogNDBweCAwIDA7Cn0KdWwgewogIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTsKICBwYWRkaW5nOiAwOwp9CmxpIHsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgbWFyZ2luOiAwIDEwcHg7Cn0KYSB7CiAgY29sb3I6ICM0MmI5ODM7Cn0K"},{"version":3,"sources":["HelloWorld.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"HelloWorld.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"hello\">\n    <h1>{{ msg }}</h1>\n    <div>\n      <h4>내 주소: {{ myaddress }}</h4>\n      <h4>내 클레이: {{ myklay }} Klay</h4>\n      <h4>내 토큰: {{ mytoken }}</h4>\n    </div>\n    <form action=\"post\">\n      <input v-model=\"sendKlay\" placeholder=\"전송할 클레이를 입력 해주세요\" />\n    </form>\n    <button @click=\"signTran\">전송</button>\n  </div>\n</template>\n\n<script>\nimport Web3 from 'web3'\nimport Caver from 'caver-js'\n\nconst caver = new Caver(new Web3.providers.HttpProvider('https://api.baobab.klaytn.net:8651'))\n\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String,\n  },\n  data() {\n    return {\n      myaddress: '0x19687755badea96d0d6f485ad7264a4af56879b9',\n      mypriv: '0x186c1d383964f07df3d76421dad200a9e105b3d3599ad9c5fbbf97cb0b260d2c',\n      toaddress: '0x8e505cd541178775eabbdaadc9834e3cf7f1a355',\n      myklay: '0',\n      mytoken: '10 AA',\n      transactionRecipt: '',\n      sendKlay: null,\n    }\n  },\n  methods: {\n    async signTran() {\n      // console.log(this.sendKlay)\n      const { rawTransaction: senderRawTransaction } = await caver.klay.accounts.signTransaction(\n        {\n          type: 'FEE_DELEGATED_VALUE_TRANSFER',\n          from: this.myaddress,\n          to: this.toaddress,\n          gas: '300000',\n          value: caver.utils.toPeb(this.sendKlay, 'KLAY'),\n        },\n        this.mypriv,\n      )\n      console.log(senderRawTransaction)\n      this.$socket.emit('data', senderRawTransaction)\n      this.$socket.on('data', function(data) {\n        console.log('Received data from server: ' + data)\n      })\n      this.$socket.on('disconnect', function() {\n        console.log('Connection closed')\n      })\n\n      // this.$http\n      //   .post('http://127.0.0.1:1337', senderRawTransaction)\n      //   .then(console.log)\n      //   .catch(console.log)\n      // =====================================================\n      // const client = this.$net\n      // client.connect(1337, '127.0.0.1', function() {\n      //   console.log('Connected to fee delegated service')\n      // })\n      // client.write(senderRawTransaction)\n\n      // client.on('data', function(data) {\n      //   console.log('Received data from server: ' + data)\n      // })\n\n      // client.on('close', function() {\n      //   console.log('Connection closed')\n      // })\n    },\n    async getKlay() {\n      const pebklay = await caver.klay.getBalance(this.myaddress)\n      this.myklay = await caver.utils.fromPeb(pebklay)\n    },\n    getklayInterval() {\n      setInterval(() => {\n        // console.log('as')\n        this.getKlay()\n      }, 1000)\n    },\n  },\n  async created() {\n    await caver.klay.getNodeInfo().then(console.log)\n    const pebklay = await caver.klay.getBalance(this.myaddress)\n    this.myklay = await caver.utils.fromPeb(pebklay)\n    // console.log(this.$net)\n    // console.lgo(this.$socket)\n    this.$socket.on('connect', function() {\n      console.log('connected')\n    })\n    this.getklayInterval()\n  },\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"]}]}